name: deploy versioned docs

on:
  push:
    branches:
      - '**'   # Trigger on all pushes; we’ll filter inside

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for mike's git-based operations

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Configure Git user
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Validate branch name
        id: validate
        run: |
          BRANCH="${GITHUB_REF##*/}"
          echo "Branch: $BRANCH"

          # Match strictly: release-vX.Y.Z
          if [[ "$BRANCH" =~ ^release-v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "✔️ Valid release branch: $BRANCH"
            VERSION="${BRANCH#release-v}"
            echo "version=$VERSION" >> $GITHUB_OUTPUT
          else
            echo "❌ Not a valid release branch. Skipping deploy."
            exit 1
          fi

      - name: Fetch latest gh-pages branch
        run: |
          git fetch origin gh-pages
          git checkout gh-pages
          git reset --hard origin/gh-pages
          git checkout ${{ github.ref_name }}

      - name: Deploy docs using mike
        run: |
          python3 <<EOF
          import yaml
          import subprocess

          with open('versions.yml', 'r') as f:
              data = yaml.safe_load(f)

          versions = data.get('versions', [])
          if not versions:
              raise SystemExit("No versions defined in versions.yml")

          # Delete all versions first to get a clean state (optional, keep if you're rebuilding everything)
          subprocess.run(["mike", "delete", "--all"], check=True)

          for entry in versions:
              version = entry['version']
              title = entry.get('title', version)  # fallback to version if title omitted
              aliases = entry.get('aliases', [])
              is_default = entry.get('default', False)

              # Format like: mike deploy 0.3.0@v0.3.0 latest stable
              cmd = ["mike", "deploy", f"{version}@{title}"] + aliases
              print(f"Deploying: {' '.join(cmd)}")
              subprocess.run(cmd, check=True)

              if is_default:
                  print(f"Setting {version} as default")
                  subprocess.run(["mike", "set-default", version], check=True)
          EOF

      - name: Push built docs to gh-pages
        run: |
          git push origin gh-pages

